name: Build

on: [push, pull_request]

# We define multiple jobs that test compatibility of the FIRESTARTER code against different compilers.
# On linux:
#   FIRESTARTER_HIP version 6.2 against the hipcc compiler on ubuntu24.04
#   FIRESTARTER_ONEAPI versions 2023.2.0 and 2024.0 against icx and icpx compiler on ubuntu24.04
#   FIRESTARTER_CUDA with cuda versions 8.0, 11.0 and NVHPC-22.5 against the default compiler on ubuntu24.04
#   FIRESTARTER against
#     ubuntu 20.04 gcc-7 and clang-9
#     ubuntu 24.04 gcc-14 and clang-18
#     default compilers on ubuntu-20.04, ubuntu-22.04 and ubuntu-24.04
# On Windows:
#   FIRESTARTER against windows-2019 MSVC and mingw
#   FIRESTARTER_CUDA against windows-2019 MSVC
# On MacOS:
#   FIRESTARTER against XCode on MacOS 13

jobs:

  build-linux-hip-rocm:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04]
        HIP: ['6.3']
    runs-on: ${{ matrix.os }}

    env:
      HIP_ROOT: '/opt/rocm'
    steps:
    - name: Try to clean up some things
      run: |
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/.ghcup

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: '0'
    - name: Install HIP runtime (if needed)
      run: |
        case ${{ matrix.HIP }} in
          6.3)
            wget https://repo.radeon.com/amdgpu-install/6.3/ubuntu/noble/amdgpu-install_6.3.60300-1_all.deb
            sudo apt install ./amdgpu-install_6.3.60300-1_all.deb
            sudo amdgpu-install -y --usecase=hiplibsdk,rocm --no-dkms
            ;;
        esac

    - name: Create build directory
      run: |
          mkdir build
    - name: Run CMake configure (HIP)
      env:
        CC: '/opt/rocm/bin/hipcc'
        CXX: '/opt/rocm/bin/hipcc'
      run: |
        export CPATH=${HIP_ROOT}/include:${HIP_ROOT}
        export LD_LIBRARY_PATH=${HIP_ROOT}/lib64:${HIP_ROOT}/lib64/stubs:${LD_LIBRARY_PATH}
        export LIBRARY_PATH=${HIP_ROOT}/lib64:${HIP_ROOT}/lib64/stubs:${LIBRARY_PATH}
        export HIP_LIB_PATH=${HIP_ROOT}/lib64:${HIP_ROOT}/lib64/stubs
        export PATH=${HIP_ROOT}:${PATH}
        export HIP_HOME=${HIP_ROOT}
        export HIP_PATH=${HIP_ROOT}
        export HIPToolkit_ROOT=${HIP_ROOT}

        cd build
        cmake -DFIRESTARTER_BUILD_TYPE="FIRESTARTER_HIP" -DCMAKE_EXE_LINKER_FLAGS="-L${HIP_ROOT}/lib64/stubs/" ..
    - name: Build (HIP)
      run: |
        cd build
        make -j4
    - name: Strip binary (HIP)
      run: |
        cd build
        strip src/FIRESTARTER_HIP
    - uses: actions/upload-artifact@v4
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request'
      with:
        name: FIRESTARTER_HIP_${{ matrix.HIP }}-linux
        retention-days: 1
        path: build/src/FIRESTARTER_HIP


  build-linux-oneapi:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04]
        ONEAPI: ['2023.2.0', '2024.0']
  
    runs-on: ${{ matrix.os }}

    steps:
    - name: Try to clean up some things
      run: |
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: '0'
    - name: Install OneAPI Base-Toolkit
      run: |
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt update
        sudo apt install intel-basekit-${{ matrix.ONEAPI }}
    - name: Create build directory
      run: |
        mkdir build
    - name: Run CMake configure (OneAPI 2023.2.0)
      if: matrix.ONEAPI == '2023.2.0'
      run: |
        . /opt/intel/oneapi/setvars.sh
        cd build
        cmake -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DFIRESTARTER_BUILD_TYPE="FIRESTARTER_ONEAPI" ..
    - name: Run CMake configure (OneAPI 2024.0)
      if: matrix.ONEAPI == '2024.0'
      run: |
        . /opt/intel/oneapi/${{ matrix.ONEAPI }}/oneapi-vars.sh
        cd build
        cmake -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DFIRESTARTER_BUILD_TYPE="FIRESTARTER_ONEAPI" ..
    - name: Build (OneAPI 2023.2.0)
      if: matrix.ONEAPI == '2023.2.0'
      run: |
        . /opt/intel/oneapi/setvars.sh
        cd build
        make -j4
    - name: Build (OneAPI 2024.0)
      if: matrix.ONEAPI == '2024.0'
      run: |
        . /opt/intel/oneapi/${{ matrix.ONEAPI }}/oneapi-vars.sh
        cd build
        make -j4
    - name: Strip binary (OneAPI)
      run: |
        cd build
        strip src/FIRESTARTER_ONEAPI
    - uses: actions/upload-artifact@v4
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request'
      with:
        name: FIRESTARTER_ONEAPI_${{ matrix.ONEAPI }}-linux
        retention-days: 1
        path: build/src/FIRESTARTER_ONEAPI
    
    - name: UnInstall OneAPI Base-Toolkit (if needed)
      run: |
        sudo apt remove intel-basekit-${{ matrix.ONEAPI }}
        sudo apt autoremove      


  build-linux-cuda:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04]
        CUDA: ['8.0', '11.0', 'NVHPC-22.5']
  
    runs-on: ${{ matrix.os }}
  
    env:
      CUDA_ROOT: '/usr/local/cuda'
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: '0'
    - name: Install CUDA runtime
      run: |
        case ${{ matrix.CUDA }} in
          8.0)
            wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run
            wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/patches/2/cuda_8.0.61.2_linux-run
            sudo sh cuda_8.0.61_375.26_linux-run --extract=${CUDA_ROOT}
            sudo sh ${CUDA_ROOT}/cuda-linux64-rel-8.0.61-21551265.run --tar mxvf -C ${CUDA_ROOT}
            sudo sh cuda_8.0.61.2_linux-run --accept-eula --silent --installdir=${CUDA_ROOT}
            rm cuda_8.0.61_375.26_linux-run
            rm cuda_8.0.61.2_linux-run
            ;;
          11.0)
            wget https://developer.download.nvidia.com/compute/cuda/11.0.3/local_installers/cuda_11.0.3_450.51.06_linux.run
            sudo sh cuda_11.0.3_450.51.06_linux.run --toolkit --toolkitpath=${CUDA_ROOT} --override --silent
            rm cuda_11.0.3_450.51.06_linux.run
            ;;
          NVHPC-22.5)
            wget https://developer.download.nvidia.com/hpc-sdk/22.5/nvhpc_2022_225_Linux_x86_64_cuda_11.7.tar.gz
            tar xpzf nvhpc_2022_225_Linux_x86_64_cuda_11.7.tar.gz
            rm nvhpc_2022_225_Linux_x86_64_cuda_11.7.tar.gz
            sudo NVHPC_SILENT="true" NVHPC_INSTALL_DIR="$CUDA_ROOT" NVHPC_INSTALL_TYPE="single" ./nvhpc_2022_225_Linux_x86_64_cuda_11.7/install
            rm -rf nvhpc_2022_225_Linux_x86_64_cuda_11.7
            ;;
        esac
    - name: Create build directory
      run: |
        mkdir build
    - name: Run CMake configure (CUDA)
      if: matrix.CUDA != 'NVHPC-22.5'
      run: |
        export CPATH=${CUDA_ROOT}/include:${CPATH}
        export LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${CUDA_ROOT}/lib64/stubs:${LD_LIBRARY_PATH}
        export LIBRARY_PATH=${CUDA_ROOT}/lib64:${CUDA_ROOT}/lib64/stubs:${LIBRARY_PATH}
        export CUDA_LIB_PATH=${CUDA_ROOT}/lib64:${CUDA_ROOT}/lib64/stubs
        export PATH=${CUDA_ROOT}/bin:${PATH}
        export CUDA_HOME=${CUDA_ROOT}
        export CUDA_PATH=${CUDA_ROOT}
        export CUDAToolkit_ROOT=${CUDA_ROOT}
  
        cd build
        cmake -DFIRESTARTER_BUILD_TYPE="FIRESTARTER_CUDA" -DCMAKE_EXE_LINKER_FLAGS="-L${CUDA_ROOT}/lib64/stubs/" ..
    - name: Run CMake configure (CUDA with NVHPC)
      if: matrix.CUDA == 'NVHPC-22.5'
      run: |
        NVARCH=`uname -s`_`uname -m`; export NVARCH
        PATH=$CUDA_ROOT/$NVARCH/22.5/compilers/bin:$PATH; export PATH
        LD_LIBRARY_PATH=$CUDA_ROOT/$NVARCH/22.5/compilers/lib:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
        LD_LIBRARY_PATH=$CUDA_ROOT/$NVARCH/22.5/cuda/11.7/lib64:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
        LD_LIBRARY_PATH=$CUDA_ROOT/$NVARCH/22.5/cuda/11.7/lib64/stubs:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
  
        cd build
        cmake -DFIRESTARTER_BUILD_TYPE="FIRESTARTER_CUDA" -DCMAKE_EXE_LINKER_FLAGS=-L"$CUDA_ROOT/$NVARCH/22.5/cuda/11.7/lib64/stubs" -LA ..
    - name: Build (CUDA)
      run: |
        cd build
        make -j4
    - name: Strip binary (CUDA)
      run: |
        cd build
        strip src/FIRESTARTER_CUDA
    - uses: actions/upload-artifact@v4
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request'
      with:
        name: FIRESTARTER_CUDA_${{ matrix.CUDA }}-linux
        retention-days: 1
        path: build/src/FIRESTARTER_CUDA
    - name: UnInstall CUDA runtime (if needed)
      run: |
        sudo rm -rf ${CUDA_ROOT}

      
  build-linux:
    strategy:
      fail-fast: true
      matrix:
        include:
          # Oldest supported compiler on older Ubuntu
          - { os: ubuntu-20.04, compiler: gcc-7,    cxxcompiler: g++-7 }
          - { os: ubuntu-20.04, compiler: clang-9,  cxxcompiler: clang++-9 }
          # Latest compiler on latest Ubuntu
          - { os: ubuntu-24.04, compiler: gcc-14,   cxxcompiler: g++-14 }
          - { os: ubuntu-24.04, compiler: clang-18, cxxcompiler: clang++-18 }
          # Default compilers on all ubuntu
          - { os: ubuntu-20.04, compiler: default }
          - { os: ubuntu-22.04, compiler: default }
          - { os: ubuntu-24.04, compiler: default }

    runs-on: ${{ matrix.os }}

    steps:
    - name: Install compiler (if needed)
      if: startsWith(matrix.compiler, 'gcc')
      run: |
        sudo apt install ${{ matrix.cxxcompiler }}
    - name: Install compiler (if needed)
      if: startsWith(matrix.compiler, 'clang')
      run: |
        sudo apt install ${{ matrix.compiler }}
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: '0'
    - name: Create build directory
      run: |
        mkdir build
    - name: Run CMake configure
      if: matrix.compiler != 'default'
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.cxxcompiler }}
      run: |
        cd build
        cmake ..
    - name: Run CMake configure
      if: matrix.compiler == 'default'
      run: |
        cd build
        cmake ..
    - name: Build (default)
      run: |
        cd build
        make -j4
    - name: Strip binary (default)
      run: |
        cd build
        strip src/FIRESTARTER
    - name: Test FIRESTARTER (default)
      run: ./build/src/FIRESTARTER -t 1
    - uses: actions/upload-artifact@v4
      if: matrix.compiler == 'clang-18' && ( github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request' )
      with:
        name: FIRESTARTER-linux
        retention-days: 1
        path: build/src/FIRESTARTER
    - name: Uninstall compiler (if needed)
      if: startsWith(matrix.compiler, 'gcc')
      run: |
        sudo apt remove ${{ matrix.cxxcompiler }}
        sudo apt autoremove
    - name: Uninstall compiler (if needed)
      if: startsWith(matrix.compiler, 'clang')
      run: |
        sudo apt remove ${{ matrix.compiler }}
        sudo apt autoremove
  

  build-windows:
    strategy:
      fail-fast: true
      matrix:
        os: [windows-2019]
        cfg:
          - { CUDA: '0',    MSVC: true }
          - { CUDA: '0',    MSVC: false }
          - { CUDA: '11.0', MSVC: true }

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'
    - name: Install Mingw
      uses: crazy-max/ghaction-chocolatey@v3
      if: matrix.cfg.MSVC == false
      with:
        args: install mingw
    - name: Install CUDA Toolkit
      if: matrix.cfg.CUDA == '11.0'
      shell: pwsh
      run: |
        Set-ExecutionPolicy unrestricted
        & '.github\\install-cuda.ps1' -Version '11.0'
    - uses: ilammy/msvc-dev-cmd@v1
      if: matrix.cfg.MSVC == true
    - name: Create build directory
      shell: pwsh
      run: |
        mkdir build
    - name: Run CMake configure
      if: matrix.cfg.CUDA == '0' && matrix.cfg.MSVC == false
      shell: pwsh
      run: |
        cd build
        cmake -G "MinGW Makefiles" ..
    - name: Run CMake configure
      if: matrix.cfg.CUDA == '0' && matrix.cfg.MSVC == true
      shell: pwsh
      run: |
        cd build
        cmake -G "NMake Makefiles" ..
    - name: Run CMake configure
      if: matrix.cfg.CUDA != '0'
      shell: pwsh
      run: |
        cd build
        ls 
        dir "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0"
        cmake -G "NMake Makefiles" -DFIRESTARTER_BUILD_TYPE="FIRESTARTER_CUDA" -DCUDAToolkit_ROOT="C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0" ..
    - name: Build
      shell: pwsh
      run: |
        cd build
        cmake --build . -j4
    - name: Copy Hwloc DLL
      shell: pwsh
      if: matrix.cfg.MSVC == true
      run: |
        cd build
        cp ../lib/Hwloc/sources/contrib/windows/x64/Release/libhwloc-15.dll src
    - name: Strip binary
      if: matrix.cfg.CUDA == '0' && matrix.cfg.MSVC == false
      run: |
        cd build
        strip src\FIRESTARTER.exe
    - name: Test FIRESTARTER
      if: matrix.cfg.CUDA == '0'
      shell: pwsh
      run: .\build\src\FIRESTARTER.exe -t 1
    - uses: actions/upload-artifact@v4
      if: matrix.cfg.CUDA == '0' && matrix.cfg.MSVC == true && ( github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request' )
      with:
        name: FIRESTARTER-windows
        retention-days: 1
        path: |
          build\src\FIRESTARTER.exe
          build\src\libhwloc-15.dll
    - uses: actions/upload-artifact@v4
      if: matrix.cfg.CUDA != '0' && ( github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request' )
      with:
        name: FIRESTARTER_CUDA_${{ matrix.cfg.CUDA }}-windows
        retention-days: 1
        path: |
          build\src\FIRESTARTER_CUDA.exe
          build\src\libhwloc-15.dll

  build-macos:
    strategy:
      fail-fast: true
      matrix:
        os: [macos-13]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'
    - name: Install Homebrew dependencies
      run: |
        brew upgrade cmake
    - name: Create build directory
      run: |
        mkdir build
    - name: Run CMake configure
      run: |
        cd build
        cmake ..
    - name: Build
      run: |
        cd build
        make -j4
    - name: Strip binary
      run: |
        cd build
        strip src/FIRESTARTER
    - name: Test FIRESTARTER
      run: |
        cd build
        ./src/FIRESTARTER -t 1
    - uses: actions/upload-artifact@v4
      if: matrix.os == 'macos-13' && ( github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request' )
      with:
        retention-days: 1
        name: FIRESTARTER-macOS_13
        path: build/src/FIRESTARTER

  create-download:
    name: Create download for Website
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request'
    needs: [ build-linux-hip-rocm, build-linux-oneapi, build-linux-cuda, build-linux, build-macos, build-windows ]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'
        path: 'sources'
    - name: Checkout submodules
      run: |
        cd sources
        git submodule update --init --recursive
    - name: Create Build directory
      run: |
        mkdir build
    # Linux
    - name: Retrieve FIRESTARTER-linux 
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER-linux
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER FIRESTARTER-linux
        rm -rf FIRESTARTER
        chmod +x FIRESTARTER-linux
    # Linux CUDA 8.0
    - name: Retrieve FIRESTARTER_CUDA_8.0-linux 
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER_CUDA_8.0-linux
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER_CUDA FIRESTARTER_CUDA_8.0
        rm -rf FIRESTARTER
        chmod +x FIRESTARTER_CUDA_8.0
    # Linux CUDA 11.0
    - name: Retrieve FIRESTARTER_CUDA_11.0-linux 
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER_CUDA_11.0-linux
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER_CUDA FIRESTARTER_CUDA_11.0
        rm -rf FIRESTARTER
        chmod +x FIRESTARTER_CUDA_11.0
    # Linux CUDA HPC
    - name: Retrieve FIRESTARTER_CUDA_NVHPC-22.5-linux 
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER_CUDA_NVHPC-22.5-linux
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER_CUDA FIRESTARTER_CUDA_NVHPC-22.5
        rm -rf FIRESTARTER
        chmod +x FIRESTARTER_CUDA_NVHPC-22.5
    # Linux OneAPI
    - name: Retrieve FIRESTARTER_ONEAPI_2024.0-linux 
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER_ONEAPI_2024.0-linux
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER_ONEAPI FIRESTARTER_ONEAPI_2024.0
        rm -rf FIRESTARTER
        chmod +x FIRESTARTER_ONEAPI_2024.0
    - name: Retrieve FIRESTARTER_ONEAPI_2023.2.0-linux 
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER_ONEAPI_2023.2.0-linux
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER_ONEAPI FIRESTARTER_ONEAPI_2023.2.0
        rm -rf FIRESTARTER
        chmod +x FIRESTARTER_ONEAPI_2023.2.0
    # Linux HIP 6.3
    - name: Retrieve FIRESTARTER_HIP_6.3-linux 
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER_HIP_6.3-linux
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER_HIP FIRESTARTER_HIP_6.3
        rm -rf FIRESTARTER
        chmod +x FIRESTARTER_HIP_6.3
    - name: Retrieve FIRESTARTER-macOS_13
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER-macOS_13
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER FIRESTARTER-macOS_13
        rm -rf FIRESTARTER
        chmod +x FIRESTARTER-macOS_13
    # Windows
    - name: Retrieve FIRESTARTER-windows
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER-windows
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER.exe FIRESTARTER-windows.exe
        mv FIRESTARTER/libhwloc-15.dll libhwloc-15.dll
        rm -rf FIRESTARTER
    # Windows CUDA
    - name: Retrieve FIRESTARTER_CUDA_11.0-windows
      uses: actions/download-artifact@v4
      with:
        name: FIRESTARTER_CUDA_11.0-windows
        path: FIRESTARTER
    - name: Move binary to right directory
      run: |
        mv FIRESTARTER/FIRESTARTER_CUDA.exe FIRESTARTER_CUDA_11.0-windows.exe
        mv FIRESTARTER/libhwloc-15.dll libhwloc-15.dll
        rm -rf FIRESTARTER
    # Create tar.gz
    - name: Copy CHANGELOG, README and LICENSE
      run: |
        grep -v '\$\$' < sources/CHANGELOG > CHANGELOG
        cat sources/README.md | tail -n +3 > README.md
        cp sources/LICENSE LICENSE
        cp sources/3rd-party-licenses . -r
        cp sources/examples . -r
    - name: Create tar.gz
      run: |
        mv FIRESTARTER-linux FIRESTARTER
        rm -rf sources/.git*
        tar -cvzf FIRESTARTER.tar.gz CHANGELOG README.md LICENSE libhwloc-15.dll 3rd-party-licenses examples sources FIRESTARTER*
    - uses: actions/upload-artifact@v4
      with:
        retention-days: 5
        name: FIRESTARTER.tar.gz
        path: FIRESTARTER.tar.gz